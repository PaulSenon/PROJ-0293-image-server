# Base stage with PNPM setup
FROM --platform=linux/arm64 node:22-slim AS base
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
WORKDIR /app
COPY package.json pnpm-lock.yaml ./
RUN echo "node-linker=hoisted" >> .npmrc
RUN corepack enable 

# Production dependencies stage
FROM base AS prod-deps
WORKDIR /app
RUN --mount=type=cache,id=pnpm,target=/pnpm/store npm_config_arch=arm64 npm_config_platform=linux pnpm install --prod --frozen-lockfile


FROM base AS build
WORKDIR /app
RUN --mount=type=cache,id=pnpm,target=/pnpm/store npm_config_arch=arm64 npm_config_platform=linux pnpm install --frozen-lockfile

COPY tsconfig.json ./
COPY src ./src
COPY esbuild.lambda.js ./

RUN pnpm run build:lambda

FROM node:22-slim AS output
WORKDIR /output
RUN apt-get update \
  && apt-get install -y zip \
  && apt-get clean \
  && rm -rf /var/lib/apt/lists/*

COPY --from=prod-deps /app/node_modules ./node_modules
COPY --from=build /app/dist/lambda ./

RUN zip -r build.zip .
RUN mkdir -p /toto/output
RUN cp build.zip /toto/output/build.zip
RUN unzip /toto/output/build.zip -d /toto/output/
RUN rm /toto/output/build.zip


FROM --platform=linux/arm64 public.ecr.aws/lambda/nodejs:22

# Set working directory to Lambda task root
WORKDIR ${LAMBDA_TASK_ROOT}

# Copy Lambda deployment contents directly
COPY --from=output /toto/output/ ${LAMBDA_TASK_ROOT}/

ENV AWS_LAMBDA_FUNCTION_MEMORY_SIZE=2048
ENV NODE_OPTIONS="--enable-source-maps"

# Set the Lambda handler - this is used by the Lambda container's entrypoint script
CMD ["index.handler"]